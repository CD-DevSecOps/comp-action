name: DotNet Build & Sonar Analysis
description: Build .NET project, run Coverlet for test coverage, and SonarQube analysis

inputs:
  dotnet-version:
    description: ".NET version to use"
    required: true
  sln-path:
    description: "Path to the .sln file to build (e.g., src/MyApp.sln)"
    required: true
  test-project-path:
    description: "Path to the test project (.csproj) to run (e.g., test/WMS.UnitTest/WMS.UnitTest.csproj)"
    required: true
  sonar-project-key:
    description: "SonarQube project key"
    required: true
  sonar-tags:
    description: "Comma-separated list of required tags (e.g. projectname=myapp,owner=Manish)"
    required: true
  test-exclusions:
    description: "Comma-separated list of test case paths to exclude"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Validate tags
      shell: bash
      run: |
        echo "üîç Validating tags..."
        required_keys=("projectname" "owner")

        # Split tags by comma
        IFS=',' read -ra TAGS <<< "${{ inputs.sonar-tags }}"

        for key in "${required_keys[@]}"; do
          found=false
          for tag in "${TAGS[@]}"; do
            if [[ "$tag" == $key=* ]]; then
              value="${tag#*=}"
              if [[ -z "$value" ]]; then
                echo "‚ùå Tag $key has no value!"
                exit 1
              fi
              echo "‚úÖ Found required tag: $key=$value"
              found=true
              break
            fi
          done
          if [ "$found" = false ]; then
            echo "‚ùå Missing required tag: $key"
            exit 1
          fi
        done

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install dependencies
      shell: bash
      run: dotnet restore "${{ inputs.sln-path }}"
    
     # 4. Begin SonarQube analysis
    - name: SonarScanner Begin
      shell: bash
      run: |
        dotnet tool install --global dotnet-sonarscanner || true
        export PATH="$PATH:$HOME/.dotnet/tools"
        dotnet sonarscanner begin \
          /k:"${{ inputs.sonar-project-key }}" \
          /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
          /d:sonar.login="${{ env.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="**/TestResults/*.opencover.xml" \
          /d:sonar.coverage.exclusions="${{ inputs.test-exclusions }}" \
          /d:sonar.taglist="${{ inputs.sonar-tags }}"

    - name: Build
      shell: bash
      run: dotnet build "${{ inputs.sln-path }}" --no-restore --configuration Release

    # 6. Run tests with coverage
    - name: Run tests with coverage
      shell: bash
      run: |
        COVERLET_EXCLUDE=""
        if [ ! -z "${{ inputs.test-exclusions }}" ]; then
          COVERLET_EXCLUDE="[${{ inputs.test-exclusions }}]*"
        fi
        dotnet test "${{ inputs.test-project-path }}" \
          --no-build --configuration Release \
          /p:CollectCoverage=true \
          /p:CoverletOutput=TestResults/ \
          /p:CoverletOutputFormat=opencover \
          /p:Exclude="$COVERLET_EXCLUDE"

    # 7. End SonarQube analysis
    - name: SonarScanner End
      shell: bash
      run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
